#!/bin/bash

source ~/dotfiles/support/gum_polyfill.sh

# Common functions

# Overwritten function - clean up space
clean () {
  shopt -s globstar

  function _clean_files_in_dir {
    gum spin --title "Cleaning $1" --show-output -- du -sh "$1" | cat
    gum spin --title "Cleaning $1" --show-output -- rm -rv "$1"/* | cat
  }

  function _clean_subdirs_in_dir {
    gum spin --title "Cleaning $1" --show-output -- du -sh "$1" | cat
    gum spin --title "Cleaning $1" --show-output -- rm -rv "$1"/*/ | cat
  }

  function _clean_paths {
    gum spin --title "Cleaning $1" --show-output -- du -sh "$@" | cat
    gum spin --title "Cleaning $1" --show-output -- rm -rv "$@" | cat
  }
}


alias tsv="column -t -s $'\t'" # Pretty-print tsv data
alias csv="column -t -s ," # Pretty-print csv data
alias rrsync="rsync -hir --executability --times" # rsync with defaults
# recursively grep a terragrunt directory, excluding junk

alias killall="killall -u $USER" # multiuser-safe killall

# [{a: b}, {a: c}] -> "A, B, C"
alias jqcsv="jq -r '
  (map(keys) | add | unique) as \$cols
  | map(. as \$row | \$cols | map(\$row[.])) as \$rows
  | \$cols, \$rows[] | @csv'"

# This violates my "no alias just for some standard switches" rule but I consistently forget these commands so I'm documenting them
# Perl printwhile program, equivalent to sed -E
alias psed="perl -p -e"
# perl printwhile program inplace, equivalent to sed -i
alias psedi="perl -pi -e"

frem() {
  if [ -z "$3" ]; then
    echo -e "frem: Format RegEx Matches. Like grep, but with match formatting\n"
    echo " Usage: frem PATTERN                  FORMAT           FILES [FILES...]"
    echo "   e.g. frem '/(.+)=(.+)/'            '\$1: \$2'         gradle.properties"
    echo "        frem '/(?<k>.+)=(?<v>.+)/'    '\$+{k}: \$+{v}'   gradle.properties"
    echo "        frem '/(\d+) (?:.+? )*(.+)/g' 'proc=\$2 pid=\$1' <(ps)"
    return
  fi
  pattern=$1
  reply=$(echo $2 | sed 's/"/\\"/g')
  shift 2
  files=$@
  cmd="print \"$reply\n\" if $pattern"
  perl -n -e "$cmd" "$@"
}

# used for password generation, various
export WORDLIST="/usr/share/dict/words"

splitpath() {
  filepath="$1" # "./relative folder/file name.j2.ext"
  rem filepath = "${dirname}/${filestem}.${extension}"
  rem filepath = "${dirname}/${filename}"
  export dirname=$(dirname "$filepath") # "./relative folder"
  export filename=$(basename -- "$filepath") # "file name.j2.ext"
  export extension="${filename##*.}" # "ext"
  export filestem="${filename%.*}" # "file name.j2"
}

sluggify() {
  echo "$@" | iconv -t ascii//TRANSLIT | sed -r s/[^a-zA-Z0-9-]+/_/g | sed -r s/^-+\|-+$//g
  # | tr A-Z a-z
}
export -f sluggify

# Colorize stderr
colorerr() {
  set -o pipefail
  "$@" 2> >(sed $'s,.*,\e[31m&\e[m,'>&2)
}

alias find="$(getex bfs find)"

# Fast find file by partial name
ff() { find . -iname "*${@}*"; }

# Magic comments that show up in `type`
eg() { return; }
rem() { return; }

makebak() {
  # for outname in f; if not outname; write; break
  for date in "$(date -I)" "$(date -Ihours)" "$(date -Iminutes)"; do
    outfile="$1.$(sluggify "${date}").bak"
    [[ ! -f "$outfile" ]] && cp -v -r --no-clobber "$1" "$outfile" && break
  done
}
export -f makebak

toggledisabled() {
  prename -v 's/(?<!.disabled)$/.disabled/' "$1";
  [[ -f "$1" ]] && prename -v 's/.disabled$//' "$1"
}
export -f toggledisabled

# Extract an archive file to a directory automatically based on filetype
extractto() {
  filename=$1
  dest=$2
  ext="${filename##*.}"
  if [[ $ext == "tar" || $ext == "gz" ]]; then
    tar -xf "${filename}" -C "${dest}"
  elif [[ $ext == "zip" ]]; then
    unzip -n "${filename}" -d "${dest}"
  else
    echo "Unknown extension $ext"
    return 1
  fi
}
export -f extractto

# Execute command $1 in directory $2..$N, aborting on non-zero return.
dmap() {( # set -e  # fail early
  cmd="$1"
  shift # pop command from arg list
  for path in $*; do
    pushd "$path"
    $cmd
    test $? -gt 0 && pwd && read -n 1 -p "Ctrl+C to quit, any other key to continue. "
    popd &>/dev/null
  done
)}

pip_update() {
  choice_table=$(
    gum spin --title "Loading outdated packages" --show-output -- \
      pip list --outdated
  )
  choices=$(
    gum choose --no-limit -- $(\
      echo "$choice_table" | tail -n +3 | cut -d' ' -f 1
  ))
  gum confirm "$choices" && \
    python3 -m pip install -U $choices
}

find_sparse_directories() {
  # List directories with N or fewer files in them
  maxfiles=${1:-'8'}
  find */ -type d -exec sh -c 'set -- "$0"/*.*; [ $# -le '$maxfiles' ]' {} \; -print
}

# Unified diff piped into vim for colouring.
vdiff() { diff --unified $@ | vim -R - ; }

# Git magic

# Squash fixup commits between head and the latest push
alias autosquash='git rebase --interactive --autosquash $(git rev-parse origin/HEAD)'

gm_rm_their_deletions()  { git rm  $(git status -s | grep -Po '^.D \K(.+)$'); }
gm_rm_our_additions()    { git add $(git status -s | grep -Po '^AU \K(.+)$'); }
gm_add_their_additions() { git add $(git status -s | grep -Po '^.A \K(.+)$'); }
gm_wassup() { tail $(git status -s | grep -Po '^(.D|AU|A.) \K(.+)$'); }

git_clone_or_update() {
  eg Clone a repo, or pull-update it if it already exists.
  repo=$1
  autodest=${repo##*/} # ## delete longest match of pattern from start
  autodest=${autodest%.git} # %  delete shortest match of pattern from end
  gitdest=${2:-$autodest}
  git clone $repo $gitdest \
    || (cd $gitdest && git pull)
  return 0
}

gitmerge() {
  if [ -z "$1" -o -z "$2" -o -z "$3" ]; then
    echo "gitmerge: do a git merge"
    echo ""
    echo "     Usage: gitmerge [target] [source] [interim] {merge options}"
    echo "       e.g. gitmerge 'release/1.1' 'hotfix/1.0/JIRA-1-slug' 'hotfix/1.1/JIRA-1-slug-merged'"
    echo " GM_ORIGIN= gitmerge 'origin/release/1.1' 'abad4ef' 'hotfix/1.1/JIRA-1-slug-merged' -Xours"
    echo ""
    return
  fi

  target=$1
  source=$2
  interm=$3

  # Set GM_FORCE to a value to bypass
  if [[ $source == *"release/"* || $source == "develop" ]]; then
    echo "Source should not be develop or release; Atlassian is wrong."
    test $GM_FORCE || return 1
  fi

  (set -e -v
      echo -e "${COLOR_BOLD}Fetching updated tracking information${COLOR_NC}"
      git fetch --all --tags --progress

      # Power tool: Execute with GM_ORIGIN set to a blank string to disable origin prepending
      # and enable things like merging in hashes
      GM_ORIGIN=${GM_ORIGIN-'origin/'}
      echo -e "${COLOR_BOLD}Checking out target '${GM_ORIGIN}${target}' in detached mode${COLOR_NC}"
      git checkout ${GM_ORIGIN}${target}

      echo -e "${COLOR_BOLD}Making fresh branch '${interm}'${COLOR_NC}"
      # OK for this to "fail"; just means the branch doesn't exist so it can't be deleted.
      git branch -d ${interm} || :
      git checkout -b ${interm}

      echo -e "${COLOR_BOLD}Kicking off no-commit merge to '${GM_ORIGIN}${source}' with options '$4'${COLOR_NC}"
      # OK for this to "fail"; just means manual resolution is necessary. Don't abort.
      git merge ${GM_ORIGIN}${source} -s recursive --no-commit --stat $4 || :

      echo -e "${COLOR_BOLD}Done.${COLOR_NC}"
      git diff ${GM_ORIGIN}${source} --stat
      git status
  )
}

cherry_pick_jira() {
  if [ -z "$1" -o -z "$2" ]; then
    echo "cherry_pick_jira: cherry-pick all the commits for a specific jira ID since a given ref"
    echo ""
    echo "Usage:  cherry_pick_jira [JIRAID] [sinceref] {cherry-pick options}"
    echo "  e.g.  cherry_pick_jira 'JIRA-1' 'release/1.0'"
    echo "        cherry_pick_jira 'JIRA-1' 'HEAD~20' '--no-commit'"
    echo "REFFMT= cherry_pick_jira 'JIRA-1' '..develop' # backport"
    echo ""
    return
  fi

  jiraid=$1
  sinceref=$2
  cp_opts=$3

  REFFMT=${REFFMT-'..'}

  (set -e
    echo -e "${COLOR_BOLD}Fetching all refs${COLOR_NC}"
    git fetch --all --tags --progress
    git-show-ref --heads

    echo -e "${COLOR_BOLD}Writing todo list${COLOR_NC}"
    # Rebase settings: commits since release head matching our jira ID in reverse order, no merges.
    logopts="--grep=^${jiraid} --reverse --no-merges ${sinceref}${REFFMT} "
    echo git log ${logopts}
    todo_list=$(git log --pretty=%H ${logopts}) # Todo list as a list of hashes
    # Pretty-print todo list for user
    git log --abbrev-commit --decorate ${logopts} \
      --format=format:'%C(yellow)%h%C(reset) - %C(dim green)%<(12,trunc)(%ci)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(auto)%d%C(reset)' ${logopts}

    [ -z "$todo_list" ] && echo "${COLOR_BOLD}Empty todo list!${COLOR_NC} Aborting" && return 1
    echo -e "${COLOR_BOLD}Cherry-picking commits${COLOR_NC}"
    git cherry-pick ${todo_list} --strategy=recursive -X theirs $cp_opts

    echo -e "${COLOR_BOLD}Cherry-pick done.${COLOR_NC}"
    git diff ${sinceref} --stat
    git status
  )
}

ddimage () {( set -e
  target_drive=${target_drive:-"\\\\Deep16/Backup/"}
  if [ -z "$1" -o -z "$2" ]; then
    echo "Take a compressed .ddimg.gz backup of a device and save it to \$target_drive='$target_drive'"
    echo "Usage: ddimage [device] [label]"
    echo "i.e.   ddimage /dev/sde rpi_backup"
    echo "Get partitions from 'mount' or 'cat /proc/partitions'"
    return
  fi
  device=$1
  label=$2
  outfile="${target_drive}/$(date '+%Y-%m-%d')_${label}.ddimg.gz"
  echo $outfile
  if [ -f "$outfile" ]; then
    echo "File exists! Aborting."
    return
  fi
  dd if=$device bs=64K status=progress | gzip -c > "$outfile"
)}

delete_empty_dirs() {
  find . -not -path '*/.*' -type d -empty -exec echo "rmdir '{}'" \; -delete;
}
export -f delete_empty_dirs

git_log_search() {
  git log -S'$@' -p | grep -i '$@'
}

reactp() {
  if [ -z "$1" -o -z "$2" ]; then
    echo "Usage: reactp <[./]file-to-watch> <[./]action> <to> <take>"
  elif ! [ -r "$1" ]; then
    echo "Can't react to $1, permission denied"
  else
    TARGET="$1"; shift
    ACTION="$@"
    LTIME=NEVER
    while sleep 1; do
      ATIME=$(stat -c %Z "$TARGET")
      if [[ "$ATIME" != "${LTIME}" ]]; then
        LTIME=$ATIME
        echo -n "$(date -Iminutes) "
        "$ACTION"
      fi
    done
  fi
}
export -f reactp

react() {
  if [ -z "$1" -o -z "$2" ]; then
    echo "Usage: react <[./]file-to-watch> <[./]action> <to> <take>"
  elif ! [ -r "$1" ]; then
    echo "Can't react to $1, permission denied"
  else
    TARGET="$1"; shift
    ACTION="$@"
    LTIME=NEVER
    while sleep 1; do
      ATIME=$(stat -c %Z "$TARGET")
      if [[ "$ATIME" != "${LTIME}" ]]; then
        LTIME=$ATIME
        echo -n "$(date -Iminutes) "
        bash -c "$ACTION"
      fi
    done
  fi
}
export -f react

# Emacs stuff
alias emacsw=$(getex emacs-w32 emacs) # Windowed
alias emacs="emacs -nw --no-splash" # Terminal

alias emacs_repair="rm -v ~/.emacs.d/**/*.elc; emacs --debug-init --eval '(progn
  (load-file \"~/.emacs.d/init-extra.el\")
  (my-package-update)
  (byte-recompile-directory (expand-file-name \"~/.emacs.d\") 0)
)'"

# Use emacs to copy the contents of a file into the X clipboard
copyf() {
  if [ -z "$1" ]; then echo "Usage: copyf <source_text_file>"; return; fi
  emacsw -Q --eval '(progn
    (setq x-select-enable-clipboard-manager t)
    (switch-to-buffer (generate-new-buffer "clip"))
    (insert-file-contents "'$1'")
    (fit-frame-to-buffer)
    (mark-whole-buffer)
    (defun docopy ()
     (interactive)
     (kill-new (buffer-string))
     (x-select-text (buffer-string))
     (sit-for 1) ; wait to flush ???
     (save-buffers-kill-terminal) ; Emacs takes a second to "flush" to the clipboard
    )
    (local-set-key "n" '\''docopy) ; needs interactive window ???
    (message "Press n to copy and exit.")
  )'
}

# Use emacs to write the contents of the X clipboard to a file
pastef() {
  if [ -z "$1" ]; then echo "Usage: w/ text in your clipboard, pastef <dest_text_file>"; return; fi
  emacsw -Q --eval '(progn
    (find-file "'$1'")
    (yank)
    (save-buffer)
    (kill-emacs)
  )'
  wc $1
  tail -n 2 $1 | cut -c 1-80 -
}

# Binary versions using base64
copybf() {
  # Powershell:
  # using namespace System.Management.Automation.Host
  #
  # param([Parameter(Mandatory)]$filename)
  # [Environment]::CurrentDirectory = (Get-Location -PSProvider FileSystem).ProviderPath
  #
  # write-host "Encoding binary text"
  # $clip = [convert]::ToBase64String((Get-Content -path $filename -Encoding byte))
  #
  # write-host "Writing to clipboard"
  # Set-Clipboard -Value $clip

  if [ -z "$1" ]; then echo "Usage: copybf <source_binary_file>"; return; fi
  base64 "$1" > "$1".b64
  copyf "$1".b64
  rm "$1".b64
}
pastebf() {
  # Powershell:
  # using namespace System.Management.Automation.Host
  #
  # param([Parameter(Mandatory)]$filename)
  # [Environment]::CurrentDirectory = (Get-Location -PSProvider FileSystem).ProviderPath
  #
  # write-host "Decoding binary text"
  # $bytes = [Convert]::FromBase64String((Get-Clipboard))
  #
  # write-host "Writing to ($filename)"
  # [IO.File]::WriteAllBytes($filename, $bytes)


  if [ -z "$1" ]; then echo "Usage: w/ b64 text in your clipboard, pastebf <dest_binary_file>"; return; fi
  pastef "$1".b64
  base64 --decode "$1".b64 > "$1"
  rm "$1".b64
}
copytardir() {
  tar -cvzf - $@ --exclude tardir.b64 | base64 > tardir.b64
  copyf tardir.b64
  rm tardir.b64
}

tarbak() {
  title=$1; shift
  outfile="${title} $(date '+%Y-%m-%d').tar.gz"
  tar -zcv -f "${outfile}" --checkpoint=.100 "$@"
  # ls -al "${outfile}"
}

# Use emacs smerge/ediff mode to resolve a git conflicted file.
smerge() {( set -ev
  if [ -z "$1" ]; then
    echo "Usage: smerge <conflicted_file>"
    echo "Automatically quits emacs and 'git add's the file when ediff is done."
    return
  fi
  emacs $1 --eval "(progn
    (add-hook 'ediff-after-quit-hook-internal 'save-buffers-kill-emacs)
    (smerge-mode)
    (smerge-ediff)
  )"
  git add $1
)}

gm_smerge_all() {
  for f in $(git status -s | grep -Po '^(AA|UU) \K(.+)$'); do
    smerge $f
  done
}

ediff() {
  if [ -z "$1" -o -z "$2" ]; then echo "Usage: ediff <file_A> <file_B>"; return; fi
  emacs=emacs

  $emacs -nw --eval "(progn
      (add-hook 'ediff-after-quit-hook-internal 'save-buffers-kill-emacs)
      (ediff-files \"$1\" \"$2\")
  )";
}

# Modern personal


pdiff() {
  # Diff pcloud "conflicted" files
  # TODO use splitext
  orig="$1"
  last="$orig"
  find -iwholename "*$orig* [conflicted*" | while read file; do
    echo "=============="
    echo "$last -> $file"
    diff "$last" "$file"
    last="$file"
  done
}

# Run ffmpeg at a calculated bitrate to make 8mb mp4s.
function discordmp4 {
  if [ -z "$1" ]; then
    echo "Usage: discordmp4 <filepath> [target size in mb (default 8)]"
    return
  fi
  mb=${2:-8} # default to 8 mb
  secs=$(ffprobe.exe -i "$1" -show_entries format=duration -of 'csv=p=0' 2>/dev/null)
  akbs=$(echo "($mb*2500)/$secs" | bc)
  vkbs=$(echo "($mb*6500)/$secs" | bc)
  echo "Audio: ${akbs}k, Video: ${vkbs}k"
  ffmpeg -i "$1" -b:v ${vkbs}k -b:a ${akbs}k "$1_${mb}mb.mp4"
}

# Misc

# Use scripts as extensionless commands
for sc in ~/dotfiles/scripts/*.{py,sh}; do
  [[ ! -f "$sc" ]] && continue
  filename="$(basename -- "$sc")"
  hash -p "$sc" "${filename%.*}"
done

# Emacs aliases
# alias ev="emacs -l ~/.emacs.d/ev-init.el"
# alias evw="emacsw -l ~/.emacs.d/ev-init.el"
alias ev="emacs"
alias evw="emacsw"

